Digital Clock App Notes


From: https://alligator.io/js/settimeout-setinterval/
in browser environments & Node.js, two methods on the global object that make it easy to schedule tasts are:
setTimeout: calls a function once after a speccified delay.

setTimeout expects 2 arguments, a reference to a callbac k function and a delay in milliseconds.
Ex.1 - This will print a message to the console after 1 second. Uses inline function expression.
setTimeout(() => {
    console.log('Alligator!);
}, 1000);

Ex.2 - This function is the same as ex.1 but it uses a reference to the function to accomplish the same goal.
function gator() {
    console.log('alligator!);
}
setTimeout(gator, 1000);

setInterval: Calls a function continuously at a specified delay between each call.

Cancelling a timer 
clearTimeout methoid is used to calcel a timeout.

Ex. 1 - function animal(animalName, extreas = '!!!') {
    const name = animalName.charAt (0).toUpperCase() + animalName.slice(1);
    console.log(`${name}${extras}`);
}

const animalTimer = setTimeout(animal, 800, 'wolf', '$#@%');

setTimeout(() => {
    clearTimeout(animalTimer);
}, 250);

Executing with 0ms delay:

A popular technique to improve the performance of JS code is to set timers with setTimeout calls that have a delay of 0ms. 
This adds a timer to the message queue for code to run ASAP, as soon as the current synchronous code and previous message in the queue have finished executing, making the code executed wit hthe setTimeout asychronous:

setTimeout(() => {
    console.log('Panda');
},0);
console.log(Koala');

Using setTmieout in this way causes the task at hand to run after instantanious tasks like console.log with no timeout. 

When using a value of 0 as a delay, the second argument of setTimeout can be omitted and 0 is just implied. 



setInterval:

The API for setInterval is pretty much the same as with setTimeout. 

1. It expects 23 arguments: a callback function and a delay in milliseconds
2. It returns a timer ID, and clearInterveal can be called with the timer ID to cancel the timer
3. additional arguments can be passed-in, and they will then be passed-in as arguments to the cvallback function
4. THE MAIN DIFFERENCE between setTimeout & setInterval is that setInterval calls the callback function repeatedly with the specified delay in-between the calls.

Ex.1 - In the following example, we increment a value and print it to the console every second:
let i = 0;

function increment() {
    i++;
    console.log(i);
}

setInterval(increment, 1000);

Recursive setTimeout Calls - Sometimes it can make more sense to use a recursive setTimeout timer instead of a setInterval timer. For one, if the tasks performed as part of the timr take a long time, using setInterval can meani that the tasks end up having no delay inbetween because the delay is calculated from the start of the task.
If using a recurring setTimeout timer instead, we have full constrol on when the delay starts. 

Ex.2 - An example of a recursive setTimeout call:

let i=0;

function increment() {
    i++;
    console.log(i);
}

let timer = setTimeout(function myTimer() {
    increment();
    timer = setTimeout(myTimer, 1000);
}, 1000);

//let's cancel it after 7 seconds

setTimeout(()=> {
    console.log('Cancelling');
    clearTimeout(timer);
}, 7000);






from Google search "How to get the current date in JS" & https://tecadmin.net/get-current-date-time-javascript/

-Use Date() function to create an object in JS with the current date & time. This provides output in UTC timezone
Ex.1 - var today = new Date();

Current date in JS 

Ex.1 - Use the following script to get the current date using JS in y-m-d format:
var today = new Date();
var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();

getFullYear() - provides current year
getMonth() - provides current month values 0-11. 0=Jan & 11=Dec
getDate() - provides day of the month values 1-31

Current Time in JS

Ex.1 - The following script get the current time using js in H:i:s format
var today = new Date();
var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

getHours() -= provides current hour between 0-23
getMinutes() - provides current minutes between 0-59
getSeconds() - Provides current seconds betewen 0-59

Current Date & Time Both IN JS

Ex.1 - Use the folling script to get the current date & time using JSJ in Y-m-d H:i:s format. You can simply combine the output of the above JS code in one variable like so:

var today = new Date();
var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
var dateTime = date+' '+time;

the dateTime variable contains result as: 2018-8-3 11:12:40




https://www.youtube.com/watch?v=0ik6X4DJKCc

Manipulating the DOM document object model with vanilla JS



https://www.youtube.com/watch?v=mPd2aJXCZ2g

Traversing the DOM

Parent, sibling, children

var itemList = document.querySelector('#items);
// parentNode
console.log(itemList.parentNode); //targets parent of #items
itemList.parentNode.style.backgroundColor = '#f4f4f4'; //changes parent element to grey
console.log(itemList.parentNode.parentNode);

parentElement works in a similar way to parentNode

childNodes
console.log(itemList.childNodes);
//this will grab the line breaks as well as the child elements

children
console.log(itemList.children);
//this will only grab the elements

console.log(itemList.children[1]);
//targets the second child element
itemList.children[1].style.backgroundColor = 'yellow';
//changes the second child element background to yellow

console.log(itemList.firstChild);
//this will target line breaks & white space just like the childNode targetting method.
console.log(itemList.firstElementChild);
//This targets the first element
itemList.firstElementChild.textContent = 'Hello 1';
//This targets the first child element of the itemList parent and changes the text to Hello 1

More similar methods - lastChild & lastChildElement

//nextSibling
console.log(itemList.nextSibling);
//This grabs white space as well
console.log(itemList.nextElementSibling);
//This grabs just the next sibling and won't work if there isn't a next sibling
console.log(itemList.previousSibling);
//again, whitespace
console.log(itemList.previousElementSibling);
//targets previous sibling

//createElement

// Create a div
var newDiv = document.createElement('div');

// Add class
newDiv.className = 'hello';

// Add ID
newDiv.id = 'hello1';

// Add attr
newDiv.setAttribute('title', 'Hello Div');

// Create text Node
var newDivText = document.createTextNode('Hello World');

// Add text to div
newDiv.appendChild(newDivText);

//adding newDiv to DOM
var container = document.querySelector('header .container');
var h1 = document.querySelector(header h1);

container.insertBefore(newDiv, h1);

newDiv.style.fontSize = '30px';

console.log(newDiv);


// Event Listener https://www.youtube.com/watch?v=wK2cBMcDTss 

//This listens for the button click and then activates the function buttonClick
var button = document.getElementById('button').addEventListener('click', buttonClick);

//this function is activated when the button is pressed. Right now it just logs something worthless in the console for testing purposes
//function buttonClick(){
//    console.log('Button clicked');
//}

function buttonClick(e){
    //position of mouse on x axis
    //console.log(e.clientX);
    //position of mouse on y axis
    //console.log(e.clientY);
    //position of mouse from element on X axis
    //console.log(e.offsetX);
    //position of mouse from element on Y axis
    //console.log(e.offsetY);
    //says if another key is being held down during the click event
    //console.log(e.altKey)

}

//position of mouse

console.log(e.clientX);

//says the event type in the console
var button = document.getElementByID('button').addEventListener('click', runEvent);
//double click version of the same
var button = document.getElementByID('button').addEventListener('dblclick', runEvent);
//runs the second the mouse clicks down
var button = document.getElementByID('button').addEventListener('mousedown', runEvent);
//runs when the mouse click is released
var button = document.getElementByID('button').addEventListener('mouseup', runEvent);

function runEvent(e){
    console.log(Event Type: `+e.type);
}



// This set of commands will allow you to mess with a div box with id=box

var box = document.getElementByID('box');

//This will fire off the event the second the mouse enters the area of the box
box.addEventListener('mouseenter', runEvent);
//This fires off when the mouse leaves the box
box.addEventListener('mouseleave', runEvent);
//fires off when the mouse enters the box and any child element
box.addEventListener('mouseover', runEvent);
//fires off when the mouse exits the box or any child elements within the box

box.addEventListener('mousemove', runEvent);

//shows the mouse coordinates on the page in real time.
function runEvent(e) {
    console.log('EVENT TYPE: '+e.type);
    output.innerHTML = '<h3>MouseX: '+e.offsetX+' </h3><h3>MouseY: ''+e.offsetY+'</h3>';
}

function runEvent(e) {
document.body.style.backgroundColor = 'rgb('+e.offsetX+','+e.offsetY+', 40)';
}
body.addEventListener('mousemove', runEvent)



//Should change the background color based on where the mouse is in the browser but didn't work in testing

var colorChange = document.getElementById('body');

colorChange.addEventListener('mousemove', runEvent);

function runEvent(e){
    document.body.style.backgroundColor = "rgb("+e.clientX+","+e.clientY+", 40)";
    }